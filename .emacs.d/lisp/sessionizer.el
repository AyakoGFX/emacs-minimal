;;; sessionizer.el --- Simple project session switcher using perspective.el -*- lexical-binding: t; -*-

;; Author: AI (ChatGPT) for Ayako
;; Version: 0.1
;; Package-Requires: ((emacs "26.1") (perspective "2.0"))
;; Keywords: project, session, perspective
;; URL: https://example.com/sessionizer

;;; Commentary:

;; `sessionizer.el` lets you quickly pick a directory from a list of base paths
;; (and optionally from your project.el ) and open it inside a new Perspective workspace.
;;
;; Features:
;; - Define your own base directories.
;; - Optionally include paths from `~/.emacs.d/projects` (used by `project.el`).
;; - Automatically open the selected directory in Dired.
;;
;; Usage example:
;;
;; (setq sessionizer-base-dirs '("~/nixos" "~/Documents"))
;; (setq sessionizer-include-projects t)
;;
;; Then call:
;;   M-x sessionizer
;;
;; recommaned packages for better compilation
;; vertico, orderless
;;
;; This package was AI-generated by ChatGPT for Ayako.

;;; Code:

(defvar sessionizer-base-dirs nil
  "List of base directories used by `sessionizer`.
Must be set before calling `sessionizer`.")

(defvar sessionizer-include-projects nil
  "If non-nil, also include paths from `~/.emacs.d/projects`.")

(defun sessionizer--load-projects ()
  "Load project paths from `~/.emacs.d/projects` file.
The file must contain a Lisp-readable list of project directories."
  (let ((projects-file "~/.emacs.d/projects"))
    (when (file-exists-p projects-file)
      (with-temp-buffer
        (insert-file-contents projects-file)
        (read (buffer-string))))))

(defun sessionizer--add-projects ()
  "Append project paths from `~/.emacs.d/projects` to `sessionizer-base-dirs`."
  (when sessionizer-include-projects
    (let ((projects (sessionizer--load-projects)))
      (setq sessionizer-base-dirs
            (append sessionizer-base-dirs (mapcar #'car projects))))))

;;;###autoload
(defun sessionizer ()
  "Pick a directory from configured paths and open it in a Perspective workspace.
Raises an error if `sessionizer-base-dirs` is not properly set."
  (interactive)
  (require 'perspective)

  ;; Check if base directories are set
  (unless (and sessionizer-base-dirs (listp sessionizer-base-dirs))
    (user-error "Please set `sessionizer-base-dirs` to a list of directories first!"))

  ;; Optionally add project paths
  (sessionizer--add-projects)

  ;; Build directory list
  (let* ((dirs (delete-dups
                (apply #'append
                       (mapcar (lambda (root)
                                 (when (file-directory-p (expand-file-name root))
                                   (directory-files (expand-file-name root) t directory-files-no-dot-files-regexp)))
                               sessionizer-base-dirs))))
         (selected (completing-read "Select directory: " dirs nil t))
         (session-name (replace-regexp-in-string "\\." "_" (file-name-nondirectory (directory-file-name selected)))))

    ;; Create/switch perspective
    (persp-switch session-name)
    (setq default-directory selected)
    (dired selected)
    (message "Switched to %s in %s" session-name selected)))

(provide 'sessionizer)

;;; sessionizer.el ends here
